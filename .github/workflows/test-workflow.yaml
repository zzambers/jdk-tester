name: "test"

on:
  push:
    branches:
      - "jdk*"
    tags:
      - "jdk*"

jobs:
  test-jdk-win:
    name: "Test JDK Win32"
    runs-on: "windows-2019"
    steps:
      - uses: actions/checkout@v2
      - name: Restore cygwin installer from cache
        id: cygwin-installer
        uses: actions/cache@v3
        with:
          path: ~/cygwin/setup-x86_64.exe
          key: cygwin-installer

      - name: Download cygwin installer
        run: |
          New-Item -Force -ItemType directory -Path "$HOME\cygwin"
          & curl -L "https://www.cygwin.com/setup-x86_64.exe" -o "$HOME/cygwin/setup-x86_64.exe"
        if: steps.cygwin-installer.outputs.cache-hit != 'true'
      - name: Restore cygwin packages from cache
        id: cygwin
        uses: actions/cache@v3
        with:
          path: ~/cygwin/packages
          key: cygwin-packages-${{ runner.os }}-v1

      - name: Install cygwin
        run: |
          Start-Process -FilePath "$HOME\cygwin\setup-x86_64.exe" -ArgumentList "--quiet-mode --packages autoconf,make,zip,unzip --root $HOME\cygwin\cygwin64 --local-package-dir $HOME\cygwin\packages --site http://mirrors.kernel.org/sourceware/cygwin --no-desktop --no-shortcuts --no-startmenu --no-admin" -Wait -NoNewWindow
      - name: clone jdk
        uses: actions/checkout@v3
        with:
          repository: openjdk/jdk11u-dev
          path: jdk
          ref: master
      - name: Install boot jdk
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 11
      - name: Restore Visual Studio 2010 from cache
        id: vs2010
        uses: actions/cache@v3
        with:
          path: VS2010Express
          key: vs2010
      - name: Download and unpack VS2010Express1.iso
        run: |
          # Orig Url: https://web.archive.org/web/20140227220734if_/http://download.microsoft.com/download/1/E/5/1E5F1C0A-0D5B-426A-A603-1798B951DDAE/VS2010Express1.iso
          # https://github.com/Winetricks/winetricks/issues/950
          mkdir "VS2010Express1"
          & curl -L "https://debian.fmi.uni-sofia.bg/~aangelov/VS2010Express1.iso" -o "VS2010Express1.iso"
          & 7z x -oVS2010Express1 "VS2010Express1.iso"
        if: steps.vs2010.outputs.cache-hit != 'true'
      - name: Install VS2010Express
        run: |
          Start-Process -FilePath "VS2010Express1\VCExpress\setup.exe" -ArgumentList "/q /norestart" -Wait -NoNewWindow
      - name: Prepare Jtreg
        run: |
          $env:Path = "$HOME\cygwin\cygwin64\bin;$env:Path" ;
          curl -L -f -o jtreg.zip "https://builds.shipilev.net/jtreg/${jtregName}.zip" ;
          & unzip jtreg.zip
      - name: Configure JDK
        run: >
          $env:Path = "$HOME\cygwin\cygwin64\bin;$HOME\cygwin\cygwin64\bin;$env:Path" ;
          $env:Path = $env:Path -split ";" -match "C:\\Windows|PowerShell|cygwin" -join ";" ;
          $env:BOOT_JDK = cygpath "$env:JAVA_HOME" ;
          $env:LIBMSVCR = cygpath 'C:\Windows\SysWOW64\msvcr100.dll' ;
          $env:JT_HOME = cygpath "$HOME/jtreg" ;
          & bash configure
          --with-toolchain-version=2010
          --with-msvcr-dll="$env:LIBMSVCR"
          --with-target-bits=32
          --with-boot-jdk="$env:BOOT_JDK"
          --with-jtreg="$env:JT_HOME" ;
          bash -c "cat $(find -name config.log)"
        working-directory: jdk
      - name: Build JDK
        run: |
          $env:Path = "$HOME\cygwin\cygwin64\bin;$HOME\cygwin\cygwin64\bin;$env:Path" ;
          $env:Path = $env:Path -split ";" -match "C:\\Windows|PowerShell|cygwin" -join ";" ;
          make images
        working-directory: jdk
      - name: Test JDK
        run: |
          $env:Path = "$HOME\cygwin\cygwin64\bin;$HOME\cygwin\cygwin64\bin;$env:Path" ;
          $env:Path = $env:Path -split ";" -match "C:\\Windows|PowerShell|cygwin" -join ";" ;
          make run-test "TEST=test/hotspot/jtreg/:tier1"
        working-directory: jdk
      - name: Pack results
        if: always()
        run: |
          $env:Path = "$HOME\cygwin\cygwin64\bin;$env:Path" ;
          tar -C jdk/build/* -czf "test-results.tar.gz" test-results test-support
        continue-on-error: true
      - name: Upload results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          path: test-results.tar.gz
        continue-on-error: true


  test-jdk:
    name: "Test JDK"
    runs-on: "ubuntu-latest"
    if: false
    steps:
      - uses: actions/checkout@v2
      - name: read config
        run: |
          . CONFIG
          [ -n "${JDK_REPO}" ]
          [ -n "${JDK_REF}" ]
          [ -n "${JDK_TEST}" ]
          echo "JDK_REPO=${JDK_REPO}" >> $GITHUB_ENV
          echo "JDK_REF=${JDK_REF}" >> $GITHUB_ENV
          echo "JDK_TEST=${JDK_TEST}" >> $GITHUB_ENV
      - name: clone jdk
        uses: actions/checkout@v2
        with:
          repository: ${{ env.JDK_REPO }}
          path: jdk
          ref: ${{ env.JDK_REF }}
      - name: system info
        run: |
          uname -a
          cat /proc/cpuinfo
      - name: Detect JDK version
        run: |
          . ./helper-funcs.sh
          detectVersionsGH
      - name: Install boot jdk
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ env.BOOT_JDK_VER }}
      - name: Install build deps
        run: |
          sudo apt-get install build-essential libfreetype6-dev libcups2-dev libx11-dev libxext-dev libxrender-dev libxrandr-dev libxtst-dev libxt-dev libasound2-dev libffi-dev autoconf
      - name: Prepare Jtreg
        run: |
          . ./helper-funcs.sh
          prepareJtreg
      - name: Configure JDK
        run: |
          . ./helper-funcs.sh
          conigureJdk
      - name: Build JDK
        run: |
          . ./helper-funcs.sh
          buildJdk
      - name: Test JDK
        run: |
          . ./helper-funcs.sh
          testJdk
      - name: Pack results
        if: always()
        run: |
          . ./helper-funcs.sh
          packResults
        continue-on-error: true
      - name: Upload results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          path: test-results.tar.gz
        continue-on-error: true
